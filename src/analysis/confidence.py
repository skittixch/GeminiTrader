# START OF FILE: src/analysis/confidence.py

import logging
from decimal import Decimal
from typing import Optional, Dict, Any, List
import pandas as pd  # For Timestamp type hint if needed

# --- Add project root ---
import os
import sys
from pathlib import Path
_project_root = Path(__file__).resolve().parent.parent.parent
if str(_project_root) not in sys.path:
    sys.path.insert(0, str(_project_root))
# --- End ---

try:
    from src.utils.formatting import to_decimal
    from src.analysis.indicators import (
        RSI_PERIOD, MACD_FAST_PERIOD, MACD_SLOW_PERIOD, MACD_SIGNAL_PERIOD,
        SMA_SHORT_PERIOD, SMA_LONG_PERIOD
    )
except ImportError:
    def to_decimal(v, default=None): return Decimal(
        v) if v is not None else default
    RSI_PERIOD = 14
    MACD_FAST_PERIOD = 12
    MACD_SLOW_PERIOD = 26
    MACD_SIGNAL_PERIOD = 9
    SMA_SHORT_PERIOD = 10
    SMA_LONG_PERIOD = 50
    print("WARNING: Using dummy to_decimal/constants in confidence.py")


logger = logging.getLogger(__name__)

# --- Confidence Calculation Constants ---
CONF_WEIGHT_RSI = Decimal('0.25')
CONF_WEIGHT_MACD = Decimal('0.35')
CONF_WEIGHT_TREND = Decimal('0.40')

RSI_LOW_THRESH = Decimal('35')
RSI_HIGH_THRESH = Decimal('70')


def calculate_confidence_v1(
    indicators: Dict[str, Optional[Decimal]],
    # config: Optional[Dict] = None # Future: load thresholds/weights from config
) -> float:
    """
    Calculates a basic confidence score (0.0 to 1.0) based on technical indicators.
    V1 uses RSI, MACD (line vs signal, histogram), and SMA trend (short vs long).
    Higher score generally indicates higher confidence for potential BUY/LONG entries.

    Args:
        indicators (Dict[str, Optional[Decimal]]): Dictionary containing the latest
            indicator values. Keys MUST match those generated by the indicators module
            (e.g., 'RSI_14', 'MACD_12_26_9', 'MACDs_12_26_9', 'MACDh_12_26_9', 'SMA_10', 'SMA_50').

    Returns:
        float: A confidence score between 0.0 and 1.0. Returns 0.5 on error or insufficient data.
    """
    if not indicators:
        logger.warning("Confidence: No indicators provided.")
        return 0.5

    total_score = Decimal('0.0')
    total_weight = Decimal('0.0')
    calculation_possible = False

    # Define expected keys
    rsi_key = f'RSI_{RSI_PERIOD}'
    macd_key = f'MACD_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}'
    signal_key = f'MACDs_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}'
    histo_key = f'MACDh_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}'
    sma_short_key = f'SMA_{SMA_SHORT_PERIOD}'
    sma_long_key = f'SMA_{SMA_LONG_PERIOD}'

    # --- 1. RSI Component ---
    rsi_value = indicators.get(rsi_key)
    rsi_score = Decimal('0.5')
    if rsi_value is not None:
        try:
            if rsi_value > RSI_HIGH_THRESH:
                rsi_score = Decimal('0.1')
            elif rsi_value < RSI_LOW_THRESH:
                rsi_score = Decimal('0.6')
            else:
                rsi_score = Decimal('0.7')
            total_score += rsi_score * CONF_WEIGHT_RSI
            total_weight += CONF_WEIGHT_RSI
            logger.debug(
                f"Confidence - {rsi_key}: {rsi_value:.2f} -> Score: {rsi_score:.2f}")
            calculation_possible = True
        except Exception as e:
            logger.warning(
                f"Confidence: Error processing {rsi_key} value {rsi_value}: {e}")
    else:
        # DEBUG if missing
        logger.debug(f"Confidence - {rsi_key}: Value not found or None.")

    # --- 2. MACD Component ---
    macd = indicators.get(macd_key)
    signal = indicators.get(signal_key)
    histogram = indicators.get(histo_key)
    macd_score = Decimal('0.5')
    if macd is not None and signal is not None and histogram is not None:
        try:
            is_bullish_cross = macd > signal
            is_histo_positive = histogram > Decimal('0.0')
            if is_bullish_cross and is_histo_positive:
                macd_score = Decimal('0.9')
            elif is_bullish_cross:
                macd_score = Decimal('0.7')
            elif is_histo_positive:
                macd_score = Decimal('0.6')
            else:
                macd_score = Decimal('0.1')
            total_score += macd_score * CONF_WEIGHT_MACD
            total_weight += CONF_WEIGHT_MACD
            logger.debug(
                f"Confidence - MACD: M={macd:.2f}, S={signal:.2f}, H={histogram:.2f} -> Score: {macd_score:.2f}")
            calculation_possible = True
        except Exception as e:
            logger.warning(
                f"Confidence: Error processing MACD values (M:{macd}, S:{signal}, H:{histogram}): {e}")
    else:
        # DEBUG if missing
        logger.debug(
            f"Confidence - MACD: One or more components missing (M:{macd is None}, S:{signal is None}, H:{histogram is None}).")

    # --- 3. Trend Component (SMA Cross) ---
    sma_short = indicators.get(sma_short_key)
    sma_long = indicators.get(sma_long_key)
    trend_score = Decimal('0.5')
    if sma_short is not None and sma_long is not None:
        try:
            if sma_short > sma_long:
                trend_score = Decimal('0.85')
            else:
                trend_score = Decimal('0.15')
            total_score += trend_score * CONF_WEIGHT_TREND
            total_weight += CONF_WEIGHT_TREND
            logger.debug(
                f"Confidence - Trend ({sma_short_key} vs {sma_long_key}): S={sma_short:.2f}, L={sma_long:.2f} -> Score: {trend_score:.2f}")
            calculation_possible = True
        except Exception as e:
            logger.warning(
                f"Confidence: Error processing SMA trend values (S:{sma_short}, L:{sma_long}): {e}")
    else:
        # DEBUG if missing
        logger.debug(
            f"Confidence - Trend: One or more SMAs missing ({sma_short_key}:{sma_short is None}, {sma_long_key}:{sma_long is None}).")

    # --- Combine Scores ---
    if total_weight == Decimal('0.0') or not calculation_possible:
        if calculation_possible:
            logger.error(
                "Confidence: Total weight is zero despite possible calculation!")
        else:
            logger.warning(
                "Confidence: Could not calculate score from any available indicator.")
        final_score = 0.5
    else:
        final_score_decimal = total_score / total_weight
        final_score_decimal = max(Decimal('0.0'), min(
            Decimal('1.0'), final_score_decimal))
        final_score = float(final_score_decimal)

    logger.info(f"Calculated Confidence Score V1: {final_score:.4f}")
    return final_score


# ... (Example Usage remains the same) ...
if __name__ == '__main__':
    logging.basicConfig(
        level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    logger.info("--- Testing Confidence Score Logic ---")
    test_indicators_1 = {  # Bullish
        f'RSI_{RSI_PERIOD}': Decimal('55.0'),
        f'MACD_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('15.5'),
        f'MACDs_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('10.2'),
        f'MACDh_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('5.3'),
        f'SMA_{SMA_SHORT_PERIOD}': Decimal('105.0'),
        f'SMA_{SMA_LONG_PERIOD}': Decimal('100.0'),
    }
    conf1 = calculate_confidence_v1(test_indicators_1)
    logger.info(f"Test 1 (Bullish): Score = {conf1:.4f}")
    test_indicators_2 = {  # Bearish
        f'RSI_{RSI_PERIOD}': Decimal('25.0'),
        f'MACD_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('-20.0'),
        f'MACDs_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('-15.0'),
        f'MACDh_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('-5.0'),
        f'SMA_{SMA_SHORT_PERIOD}': Decimal('98.0'),
        f'SMA_{SMA_LONG_PERIOD}': Decimal('100.0'),
    }
    conf2 = calculate_confidence_v1(test_indicators_2)
    logger.info(f"Test 2 (Bearish/Oversold): Score = {conf2:.4f}")
    test_indicators_3 = {  # Mixed
        f'RSI_{RSI_PERIOD}': Decimal('75.0'),
        f'MACD_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('5.0'),
        f'MACDs_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('4.5'),
        f'MACDh_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': Decimal('0.5'),
        f'SMA_{SMA_SHORT_PERIOD}': Decimal('101.0'),
        f'SMA_{SMA_LONG_PERIOD}': Decimal('100.0'),
    }
    conf3 = calculate_confidence_v1(test_indicators_3)
    logger.info(f"Test 3 (Mixed/Overbought): Score = {conf3:.4f}")
    test_indicators_4 = {  # Missing MACD
        f'RSI_{RSI_PERIOD}': Decimal('50.0'),
        f'MACD_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': None,
        f'MACDs_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': None,
        f'MACDh_{MACD_FAST_PERIOD}_{MACD_SLOW_PERIOD}_{MACD_SIGNAL_PERIOD}': None,
        f'SMA_{SMA_SHORT_PERIOD}': Decimal('100.0'),
        f'SMA_{SMA_LONG_PERIOD}': Decimal('100.0'),
    }
    conf4 = calculate_confidence_v1(test_indicators_4)
    logger.info(f"Test 4 (Missing Indicators): Score = {conf4:.4f}")
    conf5 = calculate_confidence_v1({})
    logger.info(f"Test 5 (Empty Input): Score = {conf5:.4f}")
    logger.info("--- Confidence Score Test Complete ---")

# END OF FILE: src/analysis/confidence.py
