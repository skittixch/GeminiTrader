# START OF FILE: config/config.yaml
# Main configuration file for GeminiTrader

# --- Binance.US API Settings ---
# Credentials should be loaded from .env file (via settings.py)
# Do NOT store keys/secrets directly in this YAML file.
binance_us:
  # api_key: overridden_by_env
  # api_secret: overridden_by_env
  # Optional: API request timeouts, etc.
  # request_timeout: 10

# --- Coinbase API Settings (for funding pipeline) ---
# Credentials should be loaded from .env file
coinbase:
  # api_key: overridden_by_env (CDP Key Name)
  # api_secret: overridden_by_env (Legacy/Unused)
  # private_key: overridden_by_env (CDP Private Key)

# --- Plaid API Settings (Optional, for bank integration) ---
# Credentials should be loaded from .env file
plaid:
  # client_id: overridden_by_env
  # secret: overridden_by_env
  # environment: overridden_by_env (e.g., 'sandbox', 'development', 'production')

# --- Database Settings ---
database:
  # Path relative to project root
  path: data/db
  filename: geminitrader_log.db

# --- Portfolio Settings ---
portfolio:
  # Initial cash balance for backtesting (use Decimal format)
  initial_cash: '10000.00'
  # Target quote asset (e.g., USD, USDT) - Used on Binance.US primarily
  quote_asset: 'USD'

# --- Fee Settings ---
# Fees should be represented as decimals (e.g., 0.001 for 0.1%)
# These are default trading fees, specific pipeline fees might differ.
fees:
  # Maker fee for limit orders on Binance.US
  maker: '0.001'
  # Taker fee for market orders on Binance.US
  taker: '0.001'

# --- Logging Settings ---
logging:
  # Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
  level: INFO
  # Path relative to project root for main trader log
  trader_log_path: data/logs/trader.log
  # Path for funding pipeline log
  pipeline_log_path: data/logs/pipeline.log
  # Max log file size in bytes
  max_bytes: 10485760 # 10 MB
  # Number of backup log files to keep
  backup_count: 5

# --- Data Paths ---
# Best Practice: Define standard paths for required data files
data:
  # Path to the primary historical data file used by default for backtesting/analysis
  # Use the fetch_historical_data.py script to create or update this file.
  primary_kline_csv: data/cache/BTCUSD_1h_MAIN.csv # Example Path
  # Path for caching exchange info (filters)
  exchange_info_cache: data/cache/exchange_info.json

# --- Trading Parameters ---
# Parameters specific to the live trading bot operation
trading:
  # Primary symbol pair for the live trading bot
  symbol: 'BTCUSD' # Adjust as needed
  # Primary interval for fetching klines and calculating indicators
  interval: '1h'  # Adjust as needed
  # Lookback period (number of candles) to fetch for indicator calculation
  # Ensure this is sufficient for the longest indicator period (e.g., MACD slow+signal, SMA_50) + buffer
  kline_limit: 200 # Increased from 100 for safety
  # Time to sleep between main loop iterations (in seconds)
  loop_sleep_time: 60 # Check every minute (adjust as needed)

# --- Funding Pipeline Settings ---
# Configuration for transferring funds from Coinbase to Binance.US via a low-fee asset
funding_pipeline:
  # Asset to use for low-fee transfers between exchanges (e.g., XLM, ALGO).
  intermediate_asset: 'XLM' # Example: Stellar Lumens
  binance_deposit_address: # Destination addresses on Binance.US - NOT secrets.
    XLM: "GBUTD5DNV43JBJP7AA657H2CYPUCAAFBXCKX7QE4XXGYIYFZZX2EKKVF"
    # ALGO: "YOUR_BINANCE_US_ALGO_ADDRESS_HERE" # If using ALGO
    # BTC: "YOUR_BINANCE_US_BTC_ADDRESS_HERE" # If direct BTC needed
  binance_deposit_memo: # MEMO required for certain assets (e.g., XLM, EOS, ATOM)
    XLM: "1080077224" # Often a string of numbers
    # ALGO: "" # ALGO typically doesn't use a memo

# --- Strategy Settings ---
# Define parameters for different strategy components here
strategies:
  # --- Geometric Grid Strategy (Operates on Binance.US) ---
  geometric_grid:
    base_order_size_usd: '100.00'
    grid_spacing_atr_multiplier: '0.4'
    grid_spacing_geometric_factor: '1.1'
    order_size_geometric_factor: '1.2'
    max_grid_levels: 5
    max_total_grid_quantity_base: '0.5' # Example max BTC for the grid
    atr_length: 14 # Corresponds to ATR_PERIOD in indicators.py

  # --- Profit Taking Strategy (Operates on Binance.US) ---
  profit_taking:
    tp_method: 'atr_multiple'   # Options: 'percentage', 'atr_multiple', 'fixed_amount'
    tp_value: '1.5'             # Meaning depends on method: 0.015 (1.5%) for percentage, 1.5 for ATR multiple, 100.00 for fixed amount USD
    # Optional: Confidence multipliers to adjust TP distance
    confidence_multiplier_low: '0.8'    # TP is 80% of normal offset if confidence is low
    confidence_multiplier_medium: '1.0' # TP is 100% of normal offset if confidence is medium
    confidence_multiplier_high: '1.2'   # TP is 120% of normal offset if confidence is high

  # --- Dollar Cost Averaging (DCA) Strategy ---
  dca:
    # Base amount in QUOTE currency (e.g., USD) for each DCA purchase event.
    base_amount_usd: '25.00'
    # Schedule for initiating the DCA funding pipeline.
    schedule: 'bi-weekly' # Options: 'daily', 'weekly', 'bi-weekly', 'monthly' (logic TBD)

    # --- ADDED: Risk Controls Section ---
  risk_controls:
    time_stop:
      enabled: true                 # Enable/disable the time stop feature
      duration_hours: 168          # 7 * 24 = 1 week. Time in hours after which to evaluate exit
      min_profit_pct: 0.001       # Default: 0.001 (0.1%). Only trigger exit if PnL% is below this threshold.
      # confidence_drop_threshold: 0.3 # Optional: Add later if using confidence drop check

# --- Feature Flags (Optional) ---
feature_flags:
  enable_live_trading: false
  enable_dca_pipeline: false
  enable_db_logging: true
  use_confidence_scaling: false # Set to true later when confidence score is implemented

# END OF FILE: config/config.yaml