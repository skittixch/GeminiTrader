# config/config.yaml
# Main configuration file for GeminiTrader

# --- Binance.US API Settings ---
# Credentials should be loaded from .env file (via settings.py)
# Do NOT store keys/secrets directly in this YAML file.
binance_us:
  # api_key: overridden_by_env
  # api_secret: overridden_by_env
  # Optional: API request timeouts, etc.
  # request_timeout: 10

# --- Coinbase API Settings (for funding pipeline) ---
# Credentials should be loaded from .env file
coinbase:
  # api_key: overridden_by_env
  # api_secret: overridden_by_env

# --- Plaid API Settings (Optional, for bank integration) ---
# Credentials should be loaded from .env file
plaid:
  # client_id: overridden_by_env
  # secret: overridden_by_env
  # environment: overridden_by_env (e.g., 'sandbox', 'development', 'production')

# --- Database Settings ---
database:
  # Path relative to project root
  path: data/db
  filename: geminitrader_log.db

# --- Portfolio Settings ---
portfolio:
  # Initial cash balance for backtesting (use Decimal format)
  initial_cash: '10000.00'
  # Target quote asset (e.g., USD, USDT)
  quote_asset: 'USD'

# --- Fee Settings ---
# Fees should be represented as decimals (e.g., 0.001 for 0.1%)
fees:
  # Maker fee for limit orders
  maker: '0.001'
  # Taker fee for market orders (or limit orders that fill immediately)
  taker: '0.001'

# --- Logging Settings ---
logging:
  # Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
  level: INFO
  # Path relative to project root for main trader log
  trader_log_path: data/logs/trader.log
  # Path for funding pipeline log
  pipeline_log_path: data/logs/pipeline.log
  # Max log file size in bytes
  max_bytes: 10485760 # 10 MB
  # Number of backup log files to keep
  backup_count: 5

# --- Data Paths ---
# Best Practice: Define standard paths for required data files
data:
  # Path to the primary historical data file used by default for backtesting/analysis
  # Use the fetch_historical_data.py script to create or update this file.
  primary_kline_csv: data/cache/BTCUSD_1h_MAIN.csv
  # Path for caching exchange info (filters)
  exchange_info_cache: data/cache/exchange_info.json

# --- Strategy Settings ---
# Define parameters for different strategy components here
strategies:
  # --- Geometric Grid Strategy ---
  # Parameters for the volatility-adjusted geometric dip-buying strategy
  geometric_grid:
    # Base size of the FIRST order in the grid, specified in QUOTE currency (e.g., USD)
    # This will be scaled by the confidence multiplier.
    base_order_size_usd: '100.00'
    # Multiplier for ATR to determine the initial spacing below current price for level 1
    grid_spacing_atr_multiplier: '0.4'
    # Geometric factor by which the ATR MULTIPLIER increases for subsequent levels
    # Example: 1.1 means level 2 spacing = ATR * mult * 1.1, level 3 = ATR * mult * 1.1^2
    grid_spacing_geometric_factor: '1.1'
    # Geometric factor by which the ORDER SIZE (in USD) increases for subsequent levels
    # Example: 1.2 means level 2 size = base_usd * 1.2, level 3 = base_usd * 1.2^2
    order_size_geometric_factor: '1.2'
    # Maximum number of buy limit orders to place in a single grid
    max_grid_levels: 5
    # Maximum total quantity of BASE asset allowed across all open orders in a single grid plan
    # Acts as a risk control to prevent over-exposure in one grid.
    max_total_grid_quantity_base: '0.5'
    # Length for ATR calculation used in spacing
    atr_length: 14

  # --- Simple Take Profit Strategy (for MVP) ---
  simple_tp:
    # Method for calculating TP: 'percentage' or 'atr'
    tp_method: 'percentage'
    # Value for the chosen method:
    # - If 'percentage', this is the target % gain (e.g., '0.015' for 1.5%)
    # - If 'atr', this is the ATR multiple (e.g., '1.5' for 1.5 * ATR)
    tp_value: '0.015'
    # Note: ATR length for TP calculation might use the same as grid or be separate later

  # --- Dollar Cost Averaging (DCA) Strategy ---
  dca:
    # Target asset for DCA purchases
    target_asset: 'BTCUSD'
    # Base amount in QUOTE currency for each DCA purchase (can be modulated later)
    base_amount_usd: '25.00'
    # Schedule for DCA (using cron-like syntax or descriptive strings for 'schedule' library)
    # Examples: 'daily@10:30', 'weekly@monday@09:00', 'monthly@1st@08:00'
    # Or use simpler frequency: 'daily', 'weekly', 'bi-weekly', 'monthly' (requires parsing)
    # For Phase 2 (semi-auto): This determines when the user is prompted/notified.
    schedule: 'bi-weekly' # Example: Run pipeline script semi-monthly

# --- Feature Flags (Optional) ---
# Use flags to enable/disable parts of the system during development/testing
feature_flags:
  enable_live_trading: false
  enable_dca_pipeline: false
  enable_db_logging: true
  use_confidence_scaling: false # Enable later phases

# File path: config/config.yaml