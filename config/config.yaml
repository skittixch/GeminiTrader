# START OF FILE: config/config.yaml
# Main configuration file for GeminiTrader - Structure based on user's version + required additions

# --- Binance.US API Settings ---
# Credentials should be loaded from .env file (via settings.py)
binance_us:
  # api_key: overridden_by_env
  # api_secret: overridden_by_env
  tld: 'us' # Specify TLD for python-binance connection

# --- Coinbase API Settings (for funding pipeline) ---
# Credentials should be loaded from .env file
coinbase: {}
  # api_key: overridden_by_env (CDP Key Name)
  # private_key: overridden_by_env (CDP Private Key)

# --- Plaid API Settings (Optional, for bank integration) ---
plaid: {}
  # client_id: overridden_by_env
  # secret: overridden_by_env
  # environment: overridden_by_env

# --- Database Settings ---
database:
  path: data/db
  filename: geminitrader_log.db

# --- Portfolio Settings ---
portfolio:
  initial_cash: '1000.00' # Reduced initial cash for simulation clarity
  quote_asset: 'USDT'    # Primary quote asset used on the exchange

# --- Fee Settings ---
fees:
  maker: '0.001'  # Default maker fee (0.1%)
  taker: '0.001'  # Default taker fee (0.1%)

# --- Logging Settings ---
logging:
  level: DEBUG
  console_level: INFO # Set to INFO to see more simulation progress, WARNING for less noise
  trader_log_path: data/logs/trader.log
  error_log_path: data/logs/errors.log
  pipeline_log_path: data/logs/pipeline.log
  max_bytes: 10485760 # 10 MB
  backup_count: 5

# --- Data Paths ---
data:
  # Path for caching exchange info (filters)
  exchange_info_cache: data/cache/exchange_info.json
  # primary_kline_csv: data/cache/BTCUSD_1h_MAIN.csv # Not actively used by main_trader.py

# --- Trading Parameters ---
trading:
  # <<< ADDED simulation_mode FLAG >>>
  simulation_mode: true # Set to true for simulation, false for live

  symbol: 'BTCUSDT'     # Primary trading pair
  interval: '1h'        # Kline interval for analysis
  kline_limit: 200      # Number of candles to fetch for analysis
  loop_sleep_time: 1    # Sleep time between cycles (reduced for faster sim)
  # Optional: How long to cache exchange info (used by connector if passed)
  exchange_info_cache_minutes: 1440
  # Optional: Cancel open orders on bot shutdown? (Used in main_trader shutdown)
  cancel_orders_on_exit: false

  # Entry Condition Parameters
  entry_confidence_threshold: 0.55 # Min confidence score to consider placing grid buys
  entry_rsi_threshold: 75.0       # Do not enter if RSI is ABOVE this (overbought filter)

# --- Funding Pipeline Settings ---
funding_pipeline:
  intermediate_asset: 'XLM'
  binance_deposit_address:
    XLM: "GBUTD5DNV43JBJP7AA657H2CYPUCAAFBXCKX7QE4XXGYIYFZZX2EKKVF"
  binance_deposit_memo:
    XLM: "1080077224"

# --- Strategy Settings ---
# Parameters are typically nested under the strategy name
strategies:
  geometric_grid:
    base_order_size_usd: '20.00' # Smaller size for simulation
    grid_spacing_atr_multiplier: '0.4'
    grid_spacing_geometric_factor: '1.1'
    order_size_geometric_factor: '1.2'
    max_grid_levels: 5
    max_total_grid_quantity_base: '0.5'
    # Indicator periods used by this strategy (or analysis module)
    atr_period: 14 # Renamed from atr_length for consistency
    sma_fast_period: 50 # Added example periods if needed by grid logic directly
    sma_slow_period: 200
    rsi_period: 14

  profit_taking:
    tp_method: 'atr_multiple'
    tp_value: '1.5'
    atr_period: 14 # Needs ATR period if using atr_multiple
    # Confidence multipliers adjust TP distance (optional)
    confidence_multiplier_low: '0.8'
    confidence_multiplier_medium: '1.0'
    confidence_multiplier_high: '1.2'
    # Confidence thresholds to determine which multiplier to use
    confidence_threshold_low: 0.4 # Example: Below this, use low multiplier
    confidence_threshold_high: 0.7 # Example: Above this, use high multiplier

  dca:
    base_amount_usd: '25.00'
    schedule: 'bi-weekly'

  # --- Risk Controls need their own top-level section or nested ---
  # Following original structure, maybe nested under strategies? Or separate?
  # Let's assume risk controls are accessed directly from config root for now
  # risk_controls: # Defined below as top-level based on original reference

# --- Risk Controls Settings --- # Added as separate section based on risk_controls.py usage
risk_controls:
  time_stop:
    enabled: true
    duration_hours: 168 # Time in hours to evaluate exit
    min_profit_pct: 0.001 # Only exit if PnL is below this threshold

        # --- NEW: Cascading Exit Configuration ---
    cascade:
      # Explicitly enable/disable the cascading exit behavior.
      # If false, the old behavior (immediate market sell if time stop triggers) might apply,
      # or we could make it mandatory if time_stop.enabled is true. Let's assume true enables cascade.
      enabled: true

      # Type of the *first* limit order placed when the cascade starts.
      # Options:
      # 'MAKER': Place a limit sell slightly *above* the current best bid (aiming for maker fees).
      # 'TAKER': Place a limit sell *at* the current best bid (aiming for faster fill, likely taker fees).
      # 'OFFSET': Place a limit sell N ticks *above* the current best bid (more passive maker).
      initial_order_type: 'MAKER'

      # How many price ticks *above* the best bid to place the initial MAKER or OFFSET order.
      # e.g., 1 means place 1 tick better than the best bid for the seller.
      # Ignored if initial_order_type is 'TAKER' (which uses the best bid directly).
      initial_maker_offset_ticks: 1

      # How long (in seconds) to wait for the *initial* limit order to fill.
      # If it doesn't fill within this time, it will be cancelled, and we move to the next step.
      initial_timeout_seconds: 60

      # How long (in seconds) to wait for the *aggressive taker* limit order to fill.
      # This is the second attempt after the initial order timed out.
      # If it doesn't fill, it will be cancelled, and we fall back to a market order.
      aggressive_timeout_seconds: 30

      # How many price ticks *below* the best bid to place the aggressive TAKER limit order.
      # e.g., 1 means place 1 tick worse than the best bid to increase fill chance (acting as taker).
      aggressive_taker_offset_ticks: 1
      # --- End Cascading Exit Configuration ---


# --- Analysis Parameter Overrides ---
# Optional: Override default indicator periods if needed globally
# If not present, defaults in indicator modules or strategy settings will be used.
# analysis:
#   min_candles_for_analysis: 100
#   max_historical_candles: 500
#   price_column_name: 'close' # Default column for indicators if not specified elsewhere
#   # S/R Zone Params (if used directly by analysis modules)
#   pivot_window: 10
#   zone_proximity_factor: '0.005'
#   min_zone_touches: 2
#   # Confidence Params (if used directly by analysis modules)
#   confidence_rsi_low: 35
#   confidence_rsi_high: 70
#   confidence_weights: { rsi: 0.25, macd: 0.35, trend: 0.40 }

# --- Simulation Settings ---
simulation:
  # Data file relative to project root
  data_file: "data/simulation/BTCUSDT_1h_2024-01-01_2024-03-31.csv"
  # Name of the timestamp column in the CSV (must match header exactly)
  timestamp_column: "Timestamp" # <<< Set explicitly based on user CSV sample >>>
  # Initial balance for simulation if state file is missing/empty (in quote_asset)
  initial_balance: 1000.0
  # Optional: Required columns check (can be handled in code)
  # required_columns: ["Timestamp", "Open", "High", "Low", "Close", "Volume"]
  # Optional: Delay between steps
  # step_delay_seconds: 0.01

# --- State Manager Settings --- # Added section based on main_trader.py logic
state_manager:
  filepath: data/state/trader_state.json

# --- Feature Flags ---
# Kept as per original config structure
feature_flags:
  # enable_live_trading: false # Redundant now with trading.simulation_mode
  enable_dca_pipeline: false
  enable_db_logging: true
  use_confidence_scaling: true # Let's assume we want this logic enabled

# END OF FILE: config/config.yaml